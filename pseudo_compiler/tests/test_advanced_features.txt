// Cambridge 9618 Pseudocode Advanced Features Test
// 测试 RECORD、ARRAY、FUNCTION 和 PROCEDURE

// ========== RECORD 测试 ==========
TYPE Student
    DECLARE Name : STRING
    DECLARE Age : INTEGER
    DECLARE Grade : REAL
    DECLARE IsActive : BOOLEAN
ENDTYPE

TYPE Address
    DECLARE Street : STRING
    DECLARE City : STRING
    DECLARE PostalCode : STRING
ENDTYPE

// 声明 RECORD 变量
DECLARE MyStudent : Student
DECLARE StudentList : ARRAY[1:10] OF Student
DECLARE HomeAddress : Address

// RECORD 赋值测试
MyStudent.Name ← "Alice"
MyStudent.Age ← 18
MyStudent.Grade ← 85.5
MyStudent.IsActive ← TRUE

HomeAddress.Street ← "123 Main St"
HomeAddress.City ← "London"
HomeAddress.PostalCode ← "SW1A 1AA"

// ========== ARRAY 测试 ==========
DECLARE Numbers : ARRAY[1:5] OF INTEGER
DECLARE Matrix : ARRAY[1:3, 1:3] OF REAL
DECLARE Names : ARRAY[0:4] OF STRING
DECLARE Flags : ARRAY[1:10] OF BOOLEAN

// 一维数组操作
FOR i ← 1 TO 5
    Numbers[i] ← i * 2
NEXT i

// 二维数组操作
FOR row ← 1 TO 3
    FOR col ← 1 TO 3
        Matrix[row, col] ← row + col
    NEXT col
NEXT row

// 字符串数组
Names[0] ← "Apple"
Names[1] ← "Banana"
Names[2] ← "Cherry"
Names[3] ← "Date"
Names[4] ← "Elderberry"

// 布尔数组
FOR i ← 1 TO 10
    IF i MOD 2 = 0 THEN
        Flags[i] ← TRUE
    ELSE
        Flags[i] ← FALSE
    ENDIF
NEXT i

// ========== FUNCTION 测试 ==========

// 计算阶乘的函数
FUNCTION Factorial(n : INTEGER) RETURNS INTEGER
    IF n <= 1 THEN
        RETURN 1
    ELSE
        RETURN n * Factorial(n - 1)
    ENDIF
ENDFUNCTION

// 计算两点距离的函数
FUNCTION Distance(x1 : REAL, y1 : REAL, x2 : REAL, y2 : REAL) RETURNS REAL
    DECLARE dx, dy : REAL
    dx ← x2 - x1
    dy ← y2 - y1
    RETURN SQRT(dx * dx + dy * dy)
ENDFUNCTION

// 检查是否为质数的函数
FUNCTION IsPrime(num : INTEGER) RETURNS BOOLEAN
    DECLARE i : INTEGER
    IF num <= 1 THEN
        RETURN FALSE
    ENDIF
    
    FOR i ← 2 TO num - 1
        IF num MOD i = 0 THEN
            RETURN FALSE
        ENDIF
    NEXT i
    
    RETURN TRUE
ENDFUNCTION

// 查找数组最大值的函数
FUNCTION FindMax(arr : ARRAY[1:10] OF INTEGER) RETURNS INTEGER
    DECLARE max, i : INTEGER
    max ← arr[1]
    
    FOR i ← 2 TO 10
        IF arr[i] > max THEN
            max ← arr[i]
        ENDIF
    NEXT i
    
    RETURN max
ENDFUNCTION

// ========== PROCEDURE 测试 ==========

// 打印学生信息的过程
PROCEDURE PrintStudent(student : Student)
    OUTPUT "Student Name: ", student.Name
    OUTPUT "Age: ", student.Age
    OUTPUT "Grade: ", student.Grade
    OUTPUT "Active: ", student.IsActive
ENDPROCEDURE

// 交换两个整数的过程（按引用传递）
PROCEDURE Swap(BYREF a : INTEGER, BYREF b : INTEGER)
    DECLARE temp : INTEGER
    temp ← a
    a ← b
    b ← temp
ENDPROCEDURE

// 冒泡排序过程
PROCEDURE BubbleSort(BYREF arr : ARRAY[1:10] OF INTEGER)
    DECLARE i, j : INTEGER
    
    FOR i ← 1 TO 9
        FOR j ← 1 TO 10 - i
            IF arr[j] > arr[j + 1] THEN
                CALL Swap(arr[j], arr[j + 1])
            ENDIF
        NEXT j
    NEXT i
ENDPROCEDURE

// 初始化数组的过程
PROCEDURE InitializeArray(BYREF arr : ARRAY[1:10] OF INTEGER, value : INTEGER)
    DECLARE i : INTEGER
    FOR i ← 1 TO 10
        arr[i] ← value
    NEXT i
ENDPROCEDURE

// 打印数组的过程
PROCEDURE PrintArray(arr : ARRAY[1:10] OF INTEGER)
    DECLARE i : INTEGER
    OUTPUT "Array contents: "
    FOR i ← 1 TO 10
        OUTPUT arr[i], " "
    NEXT i
    OUTPUT ""
ENDPROCEDURE

// ========== 主程序测试 ==========

// 测试 RECORD 操作
OUTPUT "=== RECORD Test ==="
CALL PrintStudent(MyStudent)

// 测试数组中的 RECORD
StudentList[1] ← MyStudent
StudentList[1].Name ← "Bob"
StudentList[1].Age ← 19
OUTPUT "Student in array:"
CALL PrintStudent(StudentList[1])

// 测试 FUNCTION 调用
OUTPUT "=== FUNCTION Test ==="
OUTPUT "Factorial of 5: ", Factorial(5)
OUTPUT "Distance between (0,0) and (3,4): ", Distance(0.0, 0.0, 3.0, 4.0)
OUTPUT "Is 17 prime? ", IsPrime(17)
OUTPUT "Is 15 prime? ", IsPrime(15)

// 测试数组和 PROCEDURE
OUTPUT "=== ARRAY and PROCEDURE Test ==="
DECLARE TestArray : ARRAY[1:10] OF INTEGER

// 初始化测试数组
FOR i ← 1 TO 10
    TestArray[i] ← 11 - i
NEXT i

OUTPUT "Original array:"
CALL PrintArray(TestArray)

OUTPUT "Maximum value: ", FindMax(TestArray)

// 排序测试
CALL BubbleSort(TestArray)
OUTPUT "Sorted array:"
CALL PrintArray(TestArray)

// 重新初始化
CALL InitializeArray(TestArray, 42)
OUTPUT "Array after initialization with 42:"
CALL PrintArray(TestArray)

// 测试变量交换
DECLARE x, y : INTEGER
x ← 10
y ← 20
OUTPUT "Before swap: x=", x, ", y=", y
CALL Swap(x, y)
OUTPUT "After swap: x=", x, ", y=", y